'use strict'

// TODO: better event hooking (post-cleanup)

const fs = require('fs')

const fakeWrapperTpl = ({name, cmd, args}) => `
#!/usr/bin/env node

'use strict'

// WARNING: THIS SCRIPT IS AUTOGENERATED BY PNEUMON AND WILL BE OVERWRITTEN ON EVERY UPGRADE

const cp = require('child_process')
cp.spawn(${[cmd, args].map(JSON.stringify).join(', ')}, {stdio: 'pipe'})
cp.on('exit', (code, sig) => {
  if (code || sig) {
    throw new Error('Code/Sig ' + (code || sig))
  }
})
`

module.exports = (getService, fakeWrapper) => class ServiceManager {
  constructor (opt) {
    Object.assign(this, opt)
    this.Service = getService()
    this.fakeWrapper = fakeWrapper + this.name + '.js'
    this.service = new this.Service({
      name: this.name,
      description: 'Pneumon App Deployment ' + this.name,
      script: this.fakeWrapper
    })
  }

  isInstalled () {

  }

  install () {
    fs.writeFileSync(this.fakeWrapper, fakeWrapperTpl(this))
    return new Promise((resolve, reject) => {
      this.service.once('install', resolve)
      this.service.once('alreadyinstalled', resolve)
      this.service.once('error', reject)
      this.service.install()
    })
  }

  uninstall () {
    fs.unlinkSync(this.fakeWrapper)
    return new Promise((resolve, reject) => {
      this.service.once('uninstall', resolve)
      this.service.once('error', reject)
      this.service.uninstall()
    })
  }

  start () {
    return new Promise((resolve, reject) => {
      this.service.once('start', resolve)
      this.service.once('error', reject)
      this.service.start()
    })
  }

  stop () {
    return new Promise((resolve, reject) => {
      this.service.once('stop', resolve)
      this.service.once('error', reject)
      this.service.stop()
    })
  }

  async restart () {
    await this.stop()
    await this.start()
  }

  async isRunningAsService () {
    return true // TODO: add
  }
}
